# OpsBrain Slack Bot - Warp Configuration

## Project Overview
**Name:** OpsBrain Slack Bot  
**Type:** Strategic AI Assistant for Solo Dev Founders  
**Tech Stack:** Python 3.13, FastAPI, OpenAI GPT-4, Slack API, Notion API  
**Environment:** MacOS with zsh shell  

## Core Functionality
- **Slash Commands:** `/ai` commands with ephemeral acknowledgment + channel response
- **Event Handling:** Direct messages and mentions with AI responses
- **Thread Context Management:** Maintains conversation context within Slack threads
- **Thread-aware Slash Commands:** Slash commands consider conversation context
- **Notion Integration:** Fetches tasks marked as "To Do" or "Inbox"
- **OpenAI Integration:** Strategic insights using GPT-4
- **Security:** Request signature verification with test mode bypass

## Project Structure
```
/Users/naultic/workplace/decouple-dev-ai-assistant/
├── main.py                           # Core application logic
├── goal_manager.py                   # Business goal management
├── requirements.txt                  # Python dependencies
├── README.md                         # Comprehensive documentation
├── BUSINESS_GOALS.md                 # Business logic documentation
├── Makefile                          # Test execution targets
├── pytest.ini                       # Test configuration
├── tests/                            # Unit tests (fast)
│   ├── test_business_goals.py        # Business logic tests
│   ├── test_environment_validation.py # Environment setup tests
│   └── integration/                  # Integration tests (slower)
│       ├── test_end_to_end_integration.py
│       ├── test_message_visibility.py
│       ├── test_security_and_core.py
│       ├── test_slash_thread_integration.py
│       └── test_thread_context.py
├── venv/                             # Virtual environment
├── .env.example                      # Environment template
├── Procfile                          # Deployment config
└── render.yaml                       # Deployment configuration
```

## Environment Setup
**Virtual Environment:** `venv/` (Python 3.13)
**Required Environment Variables:**
- `SLACK_BOT_TOKEN` - Bot User OAuth Token
- `SLACK_SIGNING_SECRET` - Slack App signing secret
- `NOTION_API_KEY` - Notion integration token
- `NOTION_DB_ID` - Target database ID
- `OPENAI_API_KEY` - OpenAI API key
- `TEST_MODE` - Set to "true" for development (skips signature verification)

## Development Workflow

### Activate Environment
```bash
source venv/bin/activate
```

### Install Dependencies
```bash
pip install -r requirements.txt
```

### Run Tests (ALWAYS after changes)
```bash
# Run all tests with verbose output
python -m pytest test_main.py tests/test_thread_context.py -v

# Run specific test file
python -m pytest tests/test_thread_context.py -v

# Run with coverage
python -m pytest --cov=main --cov-report=term-missing
```

### Run Application Locally
```bash
uvicorn main:app --reload --host 0.0.0.0 --port 8000
```

### Deploy with Gunicorn
```bash
gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:$PORT
```

## Testing Standards

### Test Structure (83 Total Tests)
**Unit Tests (45 tests - Fast, Isolated):**
- `tests/test_business_goals.py` - Business logic and goal management (74 tests)
- `tests/test_environment_validation.py` - Environment setup validation (5 tests)

**Integration Tests (38 tests - End-to-End):**
- `tests/integration/test_end_to_end_integration.py` - Full workflow testing (2 tests)
- `tests/integration/test_message_visibility.py` - Slack message handling (2 tests)
- `tests/integration/test_security_and_core.py` - Security and error handling (23 tests)
- `tests/integration/test_slash_thread_integration.py` - Thread context detection (6 tests)
- `tests/integration/test_thread_context.py` - Conversation management (4 tests)

### Test Execution
```bash
# Run unit tests only (fast - 45 tests)
make test

# Run integration tests only (slower - 38 tests)
make test-integration

# Run all tests (83 tests)
make test-all
```

**Mock Strategy:** All external APIs (Slack, Notion, OpenAI) are mocked

### Test Requirements for New Features
1. **Unit Tests:** Test individual functions in isolation
2. **Integration Tests:** Test feature within full application context
3. **Edge Cases:** Test error conditions and boundary cases
4. **Mocking:** Mock all external dependencies
5. **Environment:** Set test environment variables before importing main

### Test Template for New Features
```python
import os
import pytest
from unittest.mock import patch, MagicMock

# Set environment variables before importing main
os.environ['SLACK_BOT_TOKEN'] = 'fake_slack_token'
os.environ['SLACK_SIGNING_SECRET'] = 'fake_signing_secret'
os.environ['NOTION_API_KEY'] = 'fake_notion_key'
os.environ['NOTION_DB_ID'] = 'fake_db_id'
os.environ['OPENAI_API_KEY'] = 'fake_openai_key'
os.environ['TEST_MODE'] = 'true'

from main import your_new_function

def test_your_new_feature():
    # Test implementation
    pass

@patch('main.external_dependency')
def test_your_new_feature_with_mocking(mock_dependency):
    # Test with mocked dependencies
    pass
```

## Thread Context Management

### Key Functions
- `get_thread_context(thread_ts, channel, user_text)` - Retrieve/create context
- `update_thread_context(thread_ts, channel, ai_response)` - Update with AI response  
- `cleanup_old_threads()` - Remove threads older than 24 hours

### Context Structure
```python
{
    'messages': ['User: message', 'OpsBrain: response'],
    'created_at': unix_timestamp
}
```

### Memory Management
- **Message Limit:** 10 messages per thread (keeps last 10)
- **Cleanup:** Automatic cleanup of threads >24 hours old
- **Storage:** In-memory dictionary (consider Redis for production)

## API Endpoints

### Health Check
- **GET /** - Returns status and timestamp
- **Response:** `{"status": "healthy", "timestamp": 1234567890}`

### Slack Events
- **POST /slack** - Handles all Slack interactions
- **Content Types:** JSON (events) and form-encoded (slash commands)
- **Security:** Signature verification (bypassed in TEST_MODE)

## Development Guidelines

### Code Quality
- **Logging:** Comprehensive logging with different levels for TEST_MODE
- **Error Handling:** Graceful fallbacks for all external API failures
- **Security:** Always verify Slack signatures in production
- **Threading:** Background processing for slash commands to avoid 3-second timeout

### Adding New Features
1. **Design:** Plan the feature and its tests first
2. **Implementation:** Write the feature code
3. **Testing:** Create comprehensive tests (unit + integration)
4. **Documentation:** Update README.md with new functionality
5. **Environment:** Add any new environment variables to .env.example

### Slack App Configuration Required
**OAuth Scopes:**
- `chat:write`, `commands`, `channels:read`, `groups:read`, `im:read`, `mpim:read`

**Event Subscriptions:**
- `message.channels`, `message.groups`, `message.im`, `message.mpim`

**Slash Commands:**
- Command: `/ai`
- Request URL: `https://your-domain.com/slack`

## Common Commands

### Development
```bash
# Activate virtual environment
source venv/bin/activate

# Run tests after every change
make test-all

# Run only unit tests (fast)
make test

# Run only integration tests
make test-integration

# Run specific test
python -m pytest test_main.py::test_function_name -v

# Run with coverage
python -m pytest --cov=main --cov-report=html

# Start development server
uvicorn main:app --reload
```

### Git Workflow & Commit Standards

#### Commit Message Guidelines
**ALWAYS use extremely short commit messages (30 characters max):**

```bash
# Good examples (30 characters or less)
git commit -m "Fix null byte error"
git commit -m "Add timeout tests"
git commit -m "Update dashboard"
git commit -m "Refactor context"

# Bad examples (too long)
git commit -m "Fix null byte error in main.py file"
git commit -m "Add integration test structure"
```

#### Pre-Commit Checklist
**ALWAYS run before committing:**
```bash
# 1. Run ALL tests to ensure nothing breaks
make test-all

# 2. Check status
git status

# 3. Add files (be specific, avoid git add .)
git add specific_file.py another_file.py

# 4. Commit with SHORT message
git commit -m "Brief description of change"

# 5. Push immediately
git push
```

#### Commit Message Format Rules
1. **Maximum 30 characters** for commit message
2. **Start with verb** (Fix, Add, Update, Remove)
3. **No emojis anywhere**
4. **No special characters** that break shell parsing
5. **No line breaks** in commit message
6. **Be specific but extremely concise**

#### Examples by Change Type
```bash
# Bug fixes
git commit -m "Fix environment variable validation"
git commit -m "Fix thread context memory leak"

# New features
git commit -m "Add business goal management"
git commit -m "Add CEO dashboard endpoint"

# Refactoring
git commit -m "Refactor test structure"
git commit -m "Split integration from unit tests"

# Documentation
git commit -m "Update README with test instructions"
git commit -m "Add business goals documentation"

# Configuration
git commit -m "Add pytest configuration"
git commit -m "Update Makefile targets"
```

#### What NOT to Do
```bash
# DON'T: Multi-line commit messages
git commit -m "Fix multiple issues:
- Fix null bytes
- Update tests
- Add documentation"

# DON'T: Special characters that break shell
git commit -m "Fix "quoted" strings & special chars"

# DON'T: Extremely long descriptions
git commit -m "This commit fixes a very complex issue..."

# DON'T: Vague messages
git commit -m "Fix stuff"
git commit -m "Update code"
```

### Debugging
```bash
# Set TEST_MODE for verbose logging
export TEST_MODE=true

# Check logs during development
tail -f logs/app.log  # if logging to file

# Test signature verification
curl -X POST http://localhost:8000/slack -d '{}' -H "Content-Type: application/json"
```

## Troubleshooting

### Common Issues
1. **403 Forbidden:** Expected with invalid/test signatures when TEST_MODE=false
2. **Missing Env Vars:** Check .env file and required variables
3. **Thread Import Error:** Use `@patch('threading.Thread')` not `@patch('main.threading.Thread')`
4. **API Errors:** All external APIs should be mocked in tests

### Test Failures
- **Environment Variables:** Ensure all test env vars are set before importing main
- **Mock Issues:** Verify mock objects have required attributes (e.g., status_code)
- **Thread Context:** Clear `thread_conversations` in test fixtures

## Performance Considerations
- **Memory Usage:** Thread contexts auto-cleanup after 24 hours
- **API Limits:** Respect OpenAI and Notion API rate limits
- **Slack Timeouts:** Use background threading for slash commands
- **Context Size:** Limit conversation context to last 6 messages for AI prompts

## Security Notes
- **Signature Verification:** Always enabled in production (TEST_MODE=false)
- **Environment Variables:** Never commit actual API keys
- **Token Security:** Bot token used only for outgoing requests
- **Input Validation:** Validate all incoming Slack payloads

## Future Enhancement Ideas
- **Persistent Storage:** Replace in-memory storage with Redis/Database
- **User Preferences:** Per-user settings and context preferences  
- **Advanced Analytics:** Track usage patterns and optimize responses
- **Multi-workspace:** Support for multiple Slack workspaces
- **Plugin System:** Modular architecture for additional integrations

---
*Last Updated: 2025-08-03 - Thread Context Management Implementation*
